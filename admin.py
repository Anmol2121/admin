import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from fpdf import FPDF
from io import BytesIO
from collections import Counter
import sys

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
#creds = ServiceAccountCredentials.from_json_keyfile_name("gspread-creds.json", scope)

from run_app import resource_path
creds = ServiceAccountCredentials.from_json_keyfile_name(resource_path("gspread-creds.json"), scope)


client = gspread.authorize(creds)
sheet_url = "https://docs.google.com/spreadsheets/d/1xY6RLbn__y3T7gnTJ7tCCDpbLbNYNsjidpDIhEiRn3w/edit?usp=sharing"
sheet = client.open_by_url(sheet_url).sheet1

def create_pdf(data):
    class StyledPDF(FPDF):
        def header(self):
            self.set_fill_color(200, 0, 0)
            self.set_text_color(255, 255, 255)
            self.set_font("Arial", 'B', 14)
            self.cell(0, 10, "MEERUT INSTITUTE OF TECHNOLOGY", ln=True, align="C", fill=True)
            self.set_font("Arial", 'B', 11)
            self.cell(0, 9, "Student Registration Form", ln=True, align="C")
            self.ln(3)

        def footer(self):
            self.set_y(-10)
            self.set_font("Arial", 'I', 8)
            self.set_text_color(120, 120, 120)
            self.cell(0, 8, "Generated by MIT Online Portal | Page " + str(self.page_no()), align="C")

        def section_title(self, title):
            self.set_font("Arial", 'B', 10)
            self.set_fill_color(230, 240, 255)
            self.set_text_color(0)
            self.cell(0, 6, f"  {title}", ln=True, fill=True)
            self.ln(1)

        def field(self, label, val, w1=40, w2=70, h=5.5):
            self.set_font("Arial", 'B', 9)
            self.set_text_color(40, 40, 40)
            self.cell(w1, h, label, border=0)
            self.set_font("Arial", '', 9)
            self.set_text_color(0)
            self.cell(w2, h, str(val), border=0)

        def newline(self, h=5.5):
            self.ln(h)

    pdf = StyledPDF(orientation='L', unit='mm', format='A4')
    pdf.set_auto_page_break(auto=False)
    pdf.add_page()

    pdf.set_font("Arial", 'B', 10)
    pdf.set_text_color(0)
    pdf.cell(0, 8, f"Unique ID: {data.get('Unique ID', '-')}", ln=True, align="R")

    pdf.section_title("1. Personal Information")
    pdf.field("Name:", data.get("Name", "-"))
    pdf.field("Email:", data.get("Email", "-"))
    pdf.field("Phone:", data.get("Phone", "-"))
    pdf.newline()
    pdf.field("DOB:", data.get("DOB", "-"))
    pdf.field("Gender:", data.get("Gender", "-"))
    pdf.field("Category:", data.get("Category", "-"))
    pdf.newline()
    pdf.field("Father's Name:", data.get("Father's Name", "-"))
    pdf.field("Mother's Name:", data.get("Mother's Name", "-"))
    pdf.newline()
    pdf.set_font("Arial", 'B', 9)
    pdf.cell(35, 5.5, "Address:", border=0)
    pdf.set_font("Arial", '', 9)
    pdf.multi_cell(0, 5.5, data.get("Address", "-"))

    pdf.section_title("2. Academic Preferences")
    pdf.field("Course:", data.get("Course", "-"))
    pdf.field("Entrance Exam:", data.get("Appeared Entrance Exam", "-"))
    pdf.field("Exam Name:", data.get("Entrance Exam Name", "-"))
    pdf.newline()

    pdf.section_title("3. 10th & 12th Board Details")
    pdf.field("10th %:", f"{data.get('10th %', '-')}%")
    pdf.field("12th %:", f"{data.get('12th %', '-')}%")
    pdf.newline()
    pdf.field("10th School:", data.get("10th School", "-"))
    pdf.field("10th Board:", data.get("10th Board", "-"))
    pdf.newline()
    pdf.field("12th School:", data.get("12th School", "-"))
    pdf.field("12th Board:", data.get("12th Board", "-"))
    pdf.newline()
    pdf.set_font("Arial", '', 9)
    pdf.multi_cell(0, 5, "10th Subjects: MATH | SCIENCE | ENGLISH | HINDI | SOCIAL SCIENCE | COMPUTER")
    pdf.multi_cell(0, 5, "12th Subjects: MATHS/BIO | PHYSICS | CHEMISTRY | COMPUTER | ENGLISH | PCM/PCB %")

    pdf.section_title("4. Other Course Details")
    pdf.field("Course:", data.get("Other Course", "-"))
    pdf.newline()
    pdf.field("College:", data.get("Other College", "-"))
    pdf.newline()
    pdf.field("University:", data.get("Other University", "-"))
    pdf.newline()
    pdf.field("Percentage:", f"{data.get('Other Course %', '-')}%")
    pdf.newline()

    pdf.section_title("5. Declaration & Signatures")
    pdf.set_font("Arial", '', 9)
    pdf.cell(0, 6, "Date: ____ / ____ / ______", ln=True)
    pdf.cell(0, 6, "Candidate Signature: ___________________________", ln=True)
    pdf.ln(4)

    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Admission Source:", ln=True)
    pdf.set_font("Arial", size=12)
    source = data.get("Admission Source", "")
    direct = "[*]" if source == "Direct" else "[ ]"
    ccb = "[*]" if source == "CCB" else "[ ]"
    pdf.cell(0, 8, f"{direct} Direct    {ccb} CCB", ln=True)
    pdf.ln(5)

    pdf.set_font("Arial", 'B', 10)
    pdf.cell(0, 6, "FOR OFFICE USE", ln=True)
    pdf.set_font("Arial", '', 9)
    pdf.multi_cell(0, 8, "COMMENTS/REMARKS:\n\n")
    pdf.cell(120, 8, "Chairman", ln=0)
    pdf.cell(0, 8, "Admission Counselor", ln=True)

    pdf_output = pdf.output(dest='S').encode('latin1')
    return BytesIO(pdf_output)

def rerun():
    sys.exit()

st.set_page_config(page_title="MIT Admin Panel", layout="wide")

st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
html, body, [data-testid="stApp"] {
    font-family: 'Inter', sans-serif;
    background: linear-gradient(120deg, #e3f2fd, #fff1f2);
    background-size: 200% 200%;
    animation: animatedBG 10s ease infinite;
    color: #333;
}
@keyframes animatedBG {
    0% {background-position: 0% 50%;}
    50% {background-position: 100% 50%;}
    100% {background-position: 0% 50%;}
}
h1, h2, h3 {
    color: #111;
    font-weight: 700;
}
.block-container {
    padding: 2rem 3rem;
    animation: fadeInSlide 0.8s ease-in-out;
}
@keyframes fadeInSlide {
    0% {opacity: 0; transform: translateY(20px);}
    100% {opacity: 1; transform: translateY(0);}
}
.card {
    background: rgba(255, 255, 255, 0.65);
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 8px 30px rgba(0,0,0,0.1);
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.25);
}
.card:hover {
    transform: scale(1.01);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
}
button[kind="primary"] {
    background: linear-gradient(to right, #1e88e5, #42a5f5) !important;
    color: white !important;
    font-weight: 600;
    border-radius: 10px !important;
    padding: 0.5em 1.2em !important;
}
button[kind="primary"]:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(30, 136, 229, 0.4);
}
input, textarea {
    border-radius: 12px !important;
    padding: 0.6em !important;
    border: 1px solid #ccc !important;
    background-color: #fdfdfd !important;
}
[data-testid="stSidebar"] {
    background: linear-gradient(to bottom right, #f8f9fa, #e0e0e0);
    box-shadow: 2px 0 15px rgba(0, 0, 0, 0.1);
}
.stButton > button {
    border-radius: 8px;
    padding: 10px 20px;
    font-weight: bold;
}
.stDownloadButton > button {
    border-radius: 10px;
    font-weight: 600;
    background: #43cea2;
    background: linear-gradient(to right, #185a9d, #43cea2);
    color: white;
    padding: 0.7rem 1.4rem;
}
.stDownloadButton > button:hover {
    box-shadow: 0 4px 12px rgba(0, 128, 128, 0.3);
    transform: scale(1.03);
}
.stDataFrame th {
    background-color: #f0f4f8 !important;
    color: #111 !important;
}
</style>
""", unsafe_allow_html=True)


if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False

if not st.session_state.logged_in:
    st.title("MIT Admin Login")
    with st.form("login_form", clear_on_submit=True):
        username = st.text_input("Username", placeholder="Enter admin username")
        password = st.text_input("Password", type="password", placeholder="Enter password")
        login = st.form_submit_button("Login")

    if login:
        if username == "admin" and password == "admin123":
            st.session_state.logged_in = True
            st.rerun()
        else:
            st.error("Invalid username or password.")

else:
    #st.title("MIT Admission Admin Dashboard")

    st.markdown("<h1 style='text-align: center; font-weight: bold; font-size: 3rem; background: -webkit-linear-gradient(45deg, #1e88e5, #43cea2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;'>MIT Admission Admin Dashboard</h1>", unsafe_allow_html=True)


    if st.button("Logout"):
        st.session_state.logged_in = False
        st.rerun()

    st.markdown("---")

    headers = sheet.row_values(1)
    expected_headers = [
    "Unique ID", "Name", "Email", "Phone", "Gender", "DOB", "Category", "Father's Name", 
    "Father's Phone", "Father's Email", "Mother's Name", "Mother's Phone", "Occupation", 
    "Annual Income", "Address", "PIN", "Course", "Appeared Entrance Exam", "Entrance Exam Name", 
    "Roll No", "Application No", "Score", "10th %", "10th School", "10th Board", "10th Roll No", 
    "12th %", "12th School", "12th Board", "12th Roll No", "Other Course", "Other College", 
    "Other University", "Other Course %", "Admission Source"
]

    duplicates = set([x for x in headers if headers.count(x) > 1 and x.strip()])
    blanks = [i+1 for i, x in enumerate(headers) if x.strip() == '']

    if blanks:
        st.error(f"Blank headers found at column indices: {blanks}")
    elif duplicates:
        st.error(f"Duplicate headers found: {duplicates}")
    else:
        missing = [h for h in expected_headers if h not in headers]
        if missing:
            st.error(f"Missing expected headers: {missing}")
        else:
            st.success("Sheet headers validated successfully.")

            records = sheet.get_all_records()

            total_students = len(records)
            courses = [r['Course'] for r in records if r['Course']]
            top_course = Counter(courses).most_common(1)[0][0] if courses else "N/A"
            percents_12th = [float(r['12th %']) for r in records if r['12th %']]
            avg_12th = round(sum(percents_12th)/len(percents_12th), 2) if percents_12th else 0

            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total Students", total_students)
            with col2:
                st.metric("Top Course", top_course)
            with col3:
                st.metric("Avg 12th %", f"{avg_12th}%")

            st.subheader("Registered Students Overview")
            st.dataframe(records, use_container_width=True)

            st.subheader("Search Student Record")
            col1, col2 = st.columns([1, 2])
            with col1:
                search_by = st.radio("Search by", ["Unique ID", "Phone"], horizontal=True)
            with col2:
                query = st.text_input("Enter search term", placeholder="e.g., MIT123 or 9876543210")

            if st.button("Search"):
                found = None
                for record in records:
                    if search_by == "Unique ID" and record["Unique ID"] == query:
                        found = record
                        break
                    elif search_by == "Phone" and str(record["Phone"]) == str(query):
                        found = record
                        break

                if found:
                    with st.expander("Student Details", expanded=True):
                        st.markdown("### 🧾 Student Information")
                        left, right = st.columns(2)
                        for i, (k, v) in enumerate(found.items()):
                            if i % 2 == 0:
                                with left:
                                    st.markdown(f"<div style='margin-bottom: 8px;'><b>{k}</b><br><span style='color:#333'>{v}</span></div>", unsafe_allow_html=True)
                            else:
                                with right:
                                    st.markdown(f"<div style='margin-bottom: 8px;'><b>{k}</b><br><span style='color:#333'>{v}</span></div>", unsafe_allow_html=True)

                    pdf_buffer = create_pdf(found)
                    st.download_button(
                        label="Download PDF",
                        data=pdf_buffer,
                        file_name=f"{found['Unique ID']}_student.pdf",
                        mime="application/pdf"
                    )
                else:
                    st.warning("No matching record found.")